<?php
/**
 * RedirectPhoneNumberDestination
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * STARFACE Rest Api
 *
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 0.9.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use Swagger\Client\ObjectSerializer;

/**
 * RedirectPhoneNumberDestination Class Doc Comment
 *
 * @category Class
 * @description This RedirectDestination will redirect to a phoneNumber
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RedirectPhoneNumberDestination extends RedirectDestination
{
  const DISCRIMINATOR = null;
  
  /**
   * The original name of the model.
   *
   * @var string
   */
  protected static $swaggerModelName = 'RedirectPhoneNumberDestination';
  
  /**
   * Array of property to type mappings. Used for (de)serialization
   *
   * @var string[]
   */
  protected static $swaggerTypes = [
    'phone_number' => 'string'
  ];
  
  /**
   * Array of property to format mappings. Used for (de)serialization
   *
   * @var string[]
   */
  protected static $swaggerFormats = [
    'phone_number' => null
  ];
  /**
   * Array of attributes where the key is the local name,
   * and the value is the original name
   *
   * @var string[]
   */
  protected static $attributeMap = [
    'phone_number' => 'phoneNumber'
  ];
  /**
   * Array of attributes to setter functions (for deserialization of responses)
   *
   * @var string[]
   */
  protected static $setters = [
    'phone_number' => 'setPhoneNumber'
  ];
  /**
   * Array of attributes to getter functions (for serialization of requests)
   *
   * @var string[]
   */
  protected static $getters = [
    'phone_number' => 'getPhoneNumber'
  ];
  
  /**
   * Constructor
   *
   * @param mixed[] $data Associated array of property values
   *                      initializing the model
   */
  public function __construct(array $data = null)
  {
    parent::__construct($data);
    
    $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
  }
  
  /**
   * Array of property to type mappings. Used for (de)serialization
   *
   * @return array
   */
  public static function swaggerTypes()
  {
    return self::$swaggerTypes + parent::swaggerTypes();
  }
  
  /**
   * Array of property to format mappings. Used for (de)serialization
   *
   * @return array
   */
  public static function swaggerFormats()
  {
    return self::$swaggerFormats + parent::swaggerFormats();
  }
  
  /**
   * Array of attributes where the key is the local name,
   * and the value is the original name
   *
   * @return array
   */
  public static function attributeMap()
  {
    return parent::attributeMap() + self::$attributeMap;
  }
  
  /**
   * Array of attributes to setter functions (for deserialization of responses)
   *
   * @return array
   */
  public static function setters()
  {
    return parent::setters() + self::$setters;
  }
  
  /**
   * Array of attributes to getter functions (for serialization of requests)
   *
   * @return array
   */
  public static function getters()
  {
    return parent::getters() + self::$getters;
  }
  
  /**
   * The original name of the model.
   *
   * @return string
   */
  public function getModelName()
  {
    return self::$swaggerModelName;
  }
  
  /**
   * Validate all the properties in the model
   * return true if all passed
   *
   * @return bool True if all properties are valid
   */
  public function valid()
  {
    return count($this->listInvalidProperties()) === 0;
  }
  
  /**
   * Show all the invalid properties with reasons.
   *
   * @return array invalid properties with reasons
   */
  public function listInvalidProperties()
  {
    $invalidProperties = parent::listInvalidProperties();
    
    if ($this->container['phone_number'] === null) {
      $invalidProperties[] = "'phone_number' can't be null";
    }
    return $invalidProperties;
  }
  
  /**
   * Gets phone_number
   *
   * @return string
   */
  public function getPhoneNumber()
  {
    return $this->container['phone_number'];
  }
  
  /**
   * Sets phone_number
   *
   * @param string $phone_number phone_number
   *
   * @return $this
   */
  public function setPhoneNumber($phone_number)
  {
    $this->container['phone_number'] = $phone_number;
    
    return $this;
  }
  
  /**
   * Returns true if offset exists. False otherwise.
   *
   * @param integer $offset Offset
   *
   * @return boolean
   */
  public function offsetExists($offset)
  {
    return isset($this->container[$offset]);
  }
  
  /**
   * Gets offset.
   *
   * @param integer $offset Offset
   *
   * @return mixed
   */
  public function offsetGet($offset)
  {
    return isset($this->container[$offset]) ? $this->container[$offset] : null;
  }
  
  /**
   * Sets value based on offset.
   *
   * @param integer $offset Offset
   * @param mixed $value Value to be set
   *
   * @return void
   */
  public function offsetSet($offset, $value)
  {
    if (is_null($offset)) {
      $this->container[] = $value;
    } else {
      $this->container[$offset] = $value;
    }
  }
  
  /**
   * Unsets offset.
   *
   * @param integer $offset Offset
   *
   * @return void
   */
  public function offsetUnset($offset)
  {
    unset($this->container[$offset]);
  }
  
  /**
   * Gets the string presentation of the object
   *
   * @return string
   */
  public function __toString()
  {
    if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
      return json_encode(
        ObjectSerializer::sanitizeForSerialization($this),
        JSON_PRETTY_PRINT
      );
    }
    
    return json_encode(ObjectSerializer::sanitizeForSerialization($this));
  }
}


