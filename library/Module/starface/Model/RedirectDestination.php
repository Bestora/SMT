<?php
/**
 * RedirectDestination
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * STARFACE Rest Api
 *
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 0.9.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use InvalidArgumentException;
use Swagger\Client\ObjectSerializer;

/**
 * RedirectDestination Class Doc Comment
 *
 * @category Class
 * @description Abstract base for mailbox and phonenumber destination
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RedirectDestination implements ModelInterface, ArrayAccess
{
  const DISCRIMINATOR = 'redirectDestinationType';
  const REDIRECT_DESTINATION_TYPE_MAILBOX = 'MAILBOX';
  const REDIRECT_DESTINATION_TYPE_PHONENUMER = 'PHONENUMER';
  /**
   * The original name of the model.
   *
   * @var string
   */
  protected static $swaggerModelName = 'RedirectDestination';
  /**
   * Array of property to type mappings. Used for (de)serialization
   *
   * @var string[]
   */
  protected static $swaggerTypes = [
    'redirect_destination_type' => 'string'
  ];
  /**
   * Array of property to format mappings. Used for (de)serialization
   *
   * @var string[]
   */
  protected static $swaggerFormats = [
    'redirect_destination_type' => null
  ];
  /**
   * Array of attributes where the key is the local name,
   * and the value is the original name
   *
   * @var string[]
   */
  protected static $attributeMap = [
    'redirect_destination_type' => 'redirectDestinationType'
  ];
  
  /**
   * Array of attributes to setter functions (for deserialization of responses)
   *
   * @var string[]
   */
  protected static $setters = [
    'redirect_destination_type' => 'setRedirectDestinationType'
  ];
  
  /**
   * Array of attributes to getter functions (for serialization of requests)
   *
   * @var string[]
   */
  protected static $getters = [
    'redirect_destination_type' => 'getRedirectDestinationType'
  ];
  /**
   * Associative array for storing property values
   *
   * @var mixed[]
   */
  protected $container = [];
  
  /**
   * Constructor
   *
   * @param mixed[] $data Associated array of property values
   *                      initializing the model
   */
  public function __construct(array $data = null)
  {
    $this->container['redirect_destination_type'] = isset($data['redirect_destination_type']) ? $data['redirect_destination_type'] : null;
    
    // Initialize discriminator property with the model name.
    $discriminator = array_search('redirectDestinationType', self::$attributeMap, true);
    $this->container[$discriminator] = static::$swaggerModelName;
  }
  
  /**
   * Array of property to type mappings. Used for (de)serialization
   *
   * @return array
   */
  public static function swaggerTypes()
  {
    return self::$swaggerTypes;
  }
  
  /**
   * Array of property to format mappings. Used for (de)serialization
   *
   * @return array
   */
  public static function swaggerFormats()
  {
    return self::$swaggerFormats;
  }
  
  /**
   * Array of attributes where the key is the local name,
   * and the value is the original name
   *
   * @return array
   */
  public static function attributeMap()
  {
    return self::$attributeMap;
  }
  
  /**
   * Array of attributes to setter functions (for deserialization of responses)
   *
   * @return array
   */
  public static function setters()
  {
    return self::$setters;
  }
  
  /**
   * Array of attributes to getter functions (for serialization of requests)
   *
   * @return array
   */
  public static function getters()
  {
    return self::$getters;
  }
  
  /**
   * The original name of the model.
   *
   * @return string
   */
  public function getModelName()
  {
    return self::$swaggerModelName;
  }
  
  /**
   * Validate all the properties in the model
   * return true if all passed
   *
   * @return bool True if all properties are valid
   */
  public function valid()
  {
    return count($this->listInvalidProperties()) === 0;
  }
  
  /**
   * Show all the invalid properties with reasons.
   *
   * @return array invalid properties with reasons
   */
  public function listInvalidProperties()
  {
    $invalidProperties = [];
    
    if ($this->container['redirect_destination_type'] === null) {
      $invalidProperties[] = "'redirect_destination_type' can't be null";
    }
    $allowedValues = $this->getRedirectDestinationTypeAllowableValues();
    if (!is_null($this->container['redirect_destination_type']) && !in_array($this->container['redirect_destination_type'], $allowedValues, true)) {
      $invalidProperties[] = sprintf(
        "invalid value for 'redirect_destination_type', must be one of '%s'",
        implode("', '", $allowedValues)
      );
    }
    
    return $invalidProperties;
  }
  
  /**
   * Gets allowable values of the enum
   *
   * @return string[]
   */
  public function getRedirectDestinationTypeAllowableValues()
  {
    return [
      self::REDIRECT_DESTINATION_TYPE_MAILBOX,
      self::REDIRECT_DESTINATION_TYPE_PHONENUMER,
    ];
  }
  
  /**
   * Gets redirect_destination_type
   *
   * @return string
   */
  public function getRedirectDestinationType()
  {
    return $this->container['redirect_destination_type'];
  }
  
  /**
   * Sets redirect_destination_type
   *
   * @param string $redirect_destination_type The type of the RedirectDestination determining the concrete
   *   RedirectDestination implementation
   *
   * @return $this
   */
  public function setRedirectDestinationType($redirect_destination_type)
  {
    $allowedValues = $this->getRedirectDestinationTypeAllowableValues();
    if (!in_array($redirect_destination_type, $allowedValues, true)) {
      throw new InvalidArgumentException(
        sprintf(
          "Invalid value for 'redirect_destination_type', must be one of '%s'",
          implode("', '", $allowedValues)
        )
      );
    }
    $this->container['redirect_destination_type'] = $redirect_destination_type;
    
    return $this;
  }
  
  /**
   * Returns true if offset exists. False otherwise.
   *
   * @param integer $offset Offset
   *
   * @return boolean
   */
  public function offsetExists($offset)
  {
    return isset($this->container[$offset]);
  }
  
  /**
   * Gets offset.
   *
   * @param integer $offset Offset
   *
   * @return mixed
   */
  public function offsetGet($offset)
  {
    return isset($this->container[$offset]) ? $this->container[$offset] : null;
  }
  
  /**
   * Sets value based on offset.
   *
   * @param integer $offset Offset
   * @param mixed $value Value to be set
   *
   * @return void
   */
  public function offsetSet($offset, $value)
  {
    if (is_null($offset)) {
      $this->container[] = $value;
    } else {
      $this->container[$offset] = $value;
    }
  }
  
  /**
   * Unsets offset.
   *
   * @param integer $offset Offset
   *
   * @return void
   */
  public function offsetUnset($offset)
  {
    unset($this->container[$offset]);
  }
  
  /**
   * Gets the string presentation of the object
   *
   * @return string
   */
  public function __toString()
  {
    if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
      return json_encode(
        ObjectSerializer::sanitizeForSerialization($this),
        JSON_PRETTY_PRINT
      );
    }
    
    return json_encode(ObjectSerializer::sanitizeForSerialization($this));
  }
}


